package  {		/**************************************************	 CLASS SCROLLTEXT	 Created by Etienne TREMEL from www.etiennetremel.net/blog	 01/03/2011	 	 How to use this class ?	 Add this code in your Actionscript :	 			var myScrollBar:ScrollText = new ScrollText(myTextField); //myTextField is the TextField you want to scroll		addChild(myScrollBar);		 With this function you can change some parameters :	 ScrollText(field:TextField, obj:Object = null, margin:int = 5)	 	 	> obj : if you want to use a clip as a cursor and not the default cursor. If you want to change the marge but not the cursor write this : 				ScrollText(myTextField, null, 20);	 	> margin : space between the textfield and the scrollbar		 Extra :	 	- Change the default cursor by a clip you have created :			var myScrollBar:ScrollText = new ScrollText(myTextField, myCursor); //myCursor is the clip you want to place as cursor			addChild(myScrollBar);				- Change the default cursor format :			Use this function : setCursorFormat(cursorWidth:int, minCursorHeight:int, color:uint) like that :				myScrollBar.setCursorFormat(5, 20, 0xFF0088);				- Change the default guide format :			Use this function : setGuide(guideWidth:int, color:uint) like that :				setGuide(2, 0xFF2222);	**************************************************/		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.text.*;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.geom.Rectangle;			public class ScrollText extends Sprite {				private var txtField:TextField; // object we want to add the scrollbar		private var scrollContainer:Sprite = new Sprite();		private var scrollLine:Sprite = new Sprite();		private var cursor:Sprite = new Sprite();		private var cursorObject:Object;		private var cursorPositionX:int;		private var range:int;		private var scrollArea:Rectangle;		private var cursorIsDefault:Boolean = true; // Is the cursor an external clip ?				//Properties :		private var m:int = 5; // marge between the textfield and the scroll		private var gW:int = 2; // guide width		private var cW:int = 6; // cursor width		private var mCH:int = 20; // min cursor height		private var cColor:uint = 0x000000; // Cursor color		private var gColor:uint = 0x000000; // Guide color				public function ScrollText(field:TextField, obj:Object = null, margin:int = 5)		{			txtField = field;			m = margin;			cursorObject = obj;						txtField.addEventListener(KeyboardEvent.KEY_DOWN, changeCursorSize);						setGuide();			setCursorFormat();			createScrollBar();		}				public function setCursorFormat(cursorWidth:int=6, minCursorHeight:int=20, color:uint=0x000000):void		{			cW = cursorWidth;			mCH = minCursorHeight;			cColor = color;						if(cursorObject == null)			{				cursor.graphics.beginFill(cColor);				cursor.graphics.drawRect(0, 0, cW, txtField.height);				cursor.graphics.endFill();				cursorPositionX = txtField.x + txtField.width + m - cursor.width/2;			}			else			{				cursorIsDefault = false;				cursor = Sprite(cursorObject);				cursorPositionX = txtField.x + txtField.width + m;			}			cursor.x = cursorPositionX;			cursor.y = txtField.y;						cursor.buttonMode = true;		}				public function setGuide(guideWidth:int=2, color:uint=0x000000):void		{			gW = guideWidth;			gColor = color;						scrollLine.x = txtField.x + txtField.width + m - gW/2;			scrollLine.y = txtField.y;			scrollLine.graphics.beginFill(gColor);			scrollLine.graphics.drawRect(0, 0, gW, txtField.height);			scrollLine.graphics.endFill();		}				private function createScrollBar():void		{			cursor.addEventListener(MouseEvent.MOUSE_DOWN, startMovingCursor);			scrollContainer.addChild(scrollLine);			scrollContainer.addChild(cursor);						scrollContainer.visible = false;			addChild(scrollContainer);						setLimits();		}				private function setLimits():void		{			if(cursorIsDefault == true) 			{				range = scrollLine.height - cursor.height;			}			else			{				range = scrollLine.height;			}			scrollArea = new Rectangle(cursorPositionX, scrollLine.y, 0, range);		}				private function changeCursorSize(e:KeyboardEvent):void		{			if(txtField.maxScrollV > 1)			{				scrollContainer.visible = true; 				if(cursorIsDefault == true) 				{					cursor.height = (txtField.height / txtField.maxScrollV) + mCH;					cursor.y = txtField.y + (txtField.height - cursor.height);				}				else				{					cursor.y = txtField.y + txtField.height;				}												setLimits();			} else {				scrollContainer.visible = false;			}		}				private function startMovingCursor(e:MouseEvent):void		{			cursor.removeEventListener(MouseEvent.MOUSE_DOWN, startMovingCursor);			this.stage.addEventListener(MouseEvent.MOUSE_UP, stopMovingCursor);			cursor.addEventListener(Event.ENTER_FRAME, movingCursor);			cursor.startDrag(false, scrollArea);		}				private function movingCursor(e:Event):void		{			var p:Number = ( cursor.y - scrollLine.y ) / range;			txtField.scrollV = Math.round( ( txtField.maxScrollV - 1 ) * p ) + 1;		}				private function stopMovingCursor(e:MouseEvent):void		{			this.stage.removeEventListener(MouseEvent.MOUSE_UP, stopMovingCursor);			cursor.removeEventListener(Event.ENTER_FRAME, movingCursor);			cursor.addEventListener(MouseEvent.MOUSE_DOWN, startMovingCursor);			cursor.stopDrag();		}	}	}